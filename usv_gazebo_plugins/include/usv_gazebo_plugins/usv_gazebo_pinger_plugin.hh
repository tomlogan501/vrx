#ifndef USV_GAZEBO_PINGER_HH
#define USV_GAZEBO_PINGER_HH

#include <cmath>

#include <ros/ros.h>

#include <thread>

#include <gazebo/common/Events.hh>
#include <gazebo/common/Plugin.hh>
#include <gazebo/common/Time.hh>

#include <gazebo/math/Quaternion.hh>
#include <gazebo/math/Vector3.hh>

#include <gazebo/physics/physics.hh>

#include <gazebo/sensors/GaussianNoiseModel.hh>

#include <geometry_msgs/Vector3.h>

#include <usv_msgs/RangeBearing.h>


namespace gazebo
{
/// \brief Implements a simulated range and bearing pinger localisation system
///
/// Implements a range and bearing pinger system.  This assumes that the pinger 
/// localisation has a mechanism for estimating the range and bearing
/// of the pinger.  Pinger estimates are published using a custom message to the 
/// ROS system along with a standard header.  This should allow the tf library
/// to transform the sensor reading between frames.<br>
/// Accepts the following SDF parameters;<br>
/// <robotNamespace> - Set the namespace of the robot.  Used to setup the ROS
///   nodehandle.   <br>
/// <frameId> - Tf frame of the sensor message.  Used as part of the sensor 
///   message publication.<br>
/// <topicName> - Name of the topic that the sensor message will be published on.<br>
/// <setPositionTopicName> - Name of the topic that is used to set the position 
///   of the simulated pinger sensor.<br>
/// <position> - Position of the simulated pinger.  Defaults to origin.<br>
/// <updateRate> - Rate of simulated sensor messages.<br>
/// <rangeNoise> - Noise model for the range to the simulated pinger.<br>
/// <bearingNoise> - Noise model for the bearing to the simulated pinger.<br>
/// <elevationNoise> - Noise model for the elevation to the simulated pinger.<br>

  class USVGazeboPinger : public ModelPlugin
  {
    /// \brief Initialise the plugin
    public: USVGazeboPinger();
    
    /// \brief Shutdown the plugin
    public: virtual ~USVGazeboPinger();

    /// \brief Loads the configuration of the plugin from sdf model.
    public: void Load(physics::ModelPtr _parent, sdf::ElementPtr _sdf);

    /// \brief Callback used by gazebo to update the plugin.
    protected: virtual void UpdateChild();
  
    /// \brief Callback function called when receiving a new pinger position
    ///   via the pinger subscription callback .
    public: void PingerPositionCallback(const geometry_msgs::Vector3ConstPtr &);

    // ROS integration
    /// \brief Nodehandle used to integrate with the ROS system.
    private: std::unique_ptr<ros::NodeHandle> rosNodeHandle;    

    /// \brief Subscribes to the topic that set the pinger position        
    public: ros::Subscriber setPositionSub;

    /// \brief Publisher used to send sensor messages generated by the plugin. 
    private: ros::Publisher rangeBearingPub;
    
    /// \brief Mutex to protect callbacks.  This is used to protect the position
    ///   vector
    public: std::mutex mutex;    

    /// \brief Pointer to model object.
    private: physics::ModelPtr model;

    /// \brief Vector storing the position of the pinger.
    private: gazebo::math::Vector3 position;

    // Variables that contain parameters of sensor simulation.
    /// \brief String holding the frame id of the sensor.
    private: std::string frameId;
    
    /// \brief Float holding the frame id of the sensor.    
    private: float updateRate;

    /// \brief Variable used to track time of last update.  This is used to
    ///   produce data at the correct rate.
    private: common::Time lastUpdateTime;

    /// \brief Pointer used to connect gazebo callback to plugins update
    ///   function.
    private: event::ConnectionPtr updateConnection;
    
    // From Brian Binghams rangebearing_gazebo_plugin.
    /// \brief rangeNoise - Gazebo noise object for range
    private: gazebo::sensors::NoisePtr rangeNoise;

    /// \brief Gazebo noise object for bearing angle
    private: gazebo::sensors::NoisePtr bearingNoise;

    /// \brief Gazebo noise object for elevation angle
    private: gazebo::sensors::NoisePtr elevationNoise;
  };
}
#endif

