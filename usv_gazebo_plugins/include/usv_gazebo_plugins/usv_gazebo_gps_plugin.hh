#ifndef USV_GAZEBO_PINGER_HH
#define USV_GAZEBO_PINGER_HH

#include <cmath>

#include <ros/ros.h>

#include <thread>

#include <gazebo/common/Events.hh>
#include <gazebo/common/Plugin.hh>
#include <gazebo/common/Time.hh>

#include <gazebo/math/Quaternion.hh>
#include <gazebo/math/Vector3.hh>

#include <gazebo/physics/physics.hh>
#include <gazebo/sensors/SensorTypes.hh>
#include <gazebo/sensors/GpsSensor.hh>

#include <gazebo/transport/transport.hh>

#include <sensor_msgs/NavSatFix.h>

#include <geometry_msgs/Vector3Stamped.h>


namespace gazebo
{
/// \brief ROS interface to Gazebo's GPS sensor plugin
///
/// This sensor plugin implements an interface for ROS to a Gazebo GPS plugin.  
/// The plugin is minimal since geodetic coordinate generation and noise are  
/// provided by the Gazebo sensor<br>
/// <robotNamespace> - Set the namespace of the robot.  Used to setup the ROS
///   nodehandle.   <br>
/// <frameId> - Tf frame of the sensor message.  Used as part of the sensor 
///   message publication.<br>
/// <topicName> - Name of the topic that the fix message will be published 
/// on.<br>
/// <velTopicName> - Name of the topic that will be used for velocity 
/// messages.<br>
/// <covarianceType> - Type of covariance creation supported by this message. 
/// This is used to populate the position_covariance_type member of ROS' 
/// NavSatFix message.  Defaults to 1 corresponding with an approximated 
/// covariance. <br>
/// <covarianceEast> - covariance value for horizontal east-west <br>
/// <covarianceNorth> - covariance value for horizontal north-south <br>
/// <covarianceUp> - covariance value for vertical <br>

  class USVGazeboGPS : public SensorPlugin
  {
    /// \brief Initialise the plugin
    public: USVGazeboGPS();
    
    /// \brief Shutdown the plugin
    public: virtual ~USVGazeboGPS();

    /// \brief Loads the configuration of the plugin from sdf model.
    public: void Load(sensors::SensorPtr _parent, sdf::ElementPtr _sdf);

    /// \brief Covariance type.  Copied to ros NavSatFix message. 
    /// Some sensors produce an accurate covariance reading, others produce
    /// dilution of precision.  The NavSatFix message has a field where the 
    /// covariance type can be specified.
    public: int covarianceType;
    
    /// \brief Covariance in the east direction
    public: double covarianceEast;

    /// \brief Covariance in the north direction
    public: double covarianceNorth;

    /// \brief Covariance in the up direction
    public: double covarianceUp;
  
    // ROS integration
    /// \brief Nodehandle used to integrate with the ROS system.
    private: std::unique_ptr<ros::NodeHandle> rosNodeHandle;    

    /// \brief Publisher used to send fix messages generated by the plugin. 
    private: ros::Publisher fixPub;
    
    /// \brief Publisher used to send velocity messages generated by the plugin. 
    private: ros::Publisher velPub;    
    
    /// \brief Pointer to model object.
    private: sensors::SensorPtr sensor;

    /// \brief String holding the frame id of the sensor.
    private: std::string frameId;
    
    /// \brief Pointer used to connect gazebo callback to plugins update
    ///   function.
    private: event::ConnectionPtr updateConnection;
    
    /// \brief Pointer use to connect to gazebo message transport
    private: gazebo::transport::NodePtr gazebo_node_;
    
    /// \brief Pointer to subscriber object.  Connects to gps sensor message 
    private: gazebo::transport::SubscriberPtr gps_sub_;
    
    /// \brief GPS sensor message callback
    private: void OnGPS(ConstGPSPtr &_msg);    
  };
}
#endif

