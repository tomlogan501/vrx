#ifndef USV_GAZEBO_PINGER_HH
#define USV_GAZEBO_PINGER_HH

#include <cmath>

#include <ros/ros.h>

#include <thread>

#include <gazebo/common/Events.hh>
#include <gazebo/common/Plugin.hh>
#include <gazebo/common/Time.hh>

#include <gazebo/math/Quaternion.hh>
#include <gazebo/math/Vector3.hh>

#include <gazebo/physics/physics.hh>
#include <gazebo/sensors/SensorTypes.hh>
#include <gazebo/sensors/GpsSensor.hh>

#include <gazebo/transport/transport.hh>

#include <sensor_msgs/NavSatFix.h>

#include <geometry_msgs/Vector3Stamped.h>


namespace gazebo
{
/// \brief ROS interface to publish the world frame velocity of a link
///
/// This model plugin publishes the world velocity of a model to a ROS topic.
/// This is intended to allow the ground truthing of other world frame sensors
///  For this reason, no support for noise is currently implemented<br>
/// <robotNamespace> - Set the namespace of the robot.  Used to setup the ROS
///   nodehandle.   <br>
/// <frameId> - Tf frame of the sensor message.  Used as part of the sensor 
///   message publication.<br>
/// <topicName> - Name of the topic that the velocity messages will be published 
/// on.<br>
/// <updateRate> - rate to publishmessages at.  Default to 10Hz

  class USVV3D : public ModelPlugin
  {
    /// \brief Initialise the plugin
    public: USVV3D();
    
    /// \brief Shutdown the plugin
    public: virtual ~USVV3D();

    /// \brief Loads the configuration of the plugin from sdf model.
    public: void Load(physics::ModelPtr _parent, sdf::ElementPtr _sdf);

    /// \brief Called when model is updated.
    public: void Update();
    
    /// \brief Frame to use when publishing velocity
    public: std::string frameId;
    
    /// \brief Update rate to publish messages at
    public: float updateRate;
    
    /// \brief Time used to calculate message publishing rate
    private: common::Time lastUpdateTime;
  
    // ROS integration
    /// \brief Nodehandle used to integrate with the ROS system.
    private: std::unique_ptr<ros::NodeHandle> rosNodeHandle;    

    /// \brief Publisher used to send fix messages generated by the plugin. 
    private: ros::Publisher velPub;
        
    /// \brief Pointer to model object.
    private: physics::ModelPtr model;
    
    /// \brief Connection used to generate update callbacks
    private: event::ConnectionPtr updateConnection;

  };
}
#endif

